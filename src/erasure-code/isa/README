============================================
INTEL ISA library Erasure Coding plugin
============================================

Build Requirements
==================
Plug-in build compiles the included sources of ISA-L v2.10 and links them into the plugin. ISA-L implementation is portable and probes CPU features during runtime. Note that the names of the assembler source files have been renamed from *.asm to *.asm.s to be compatible with Automake.

Run-time Requirements
=====================
None

Plug-in Configuration
=====================

Used parameters are:
k : number of data chunks
m : number of coding chunks
technique : reed_sol_van,cauchy

The plug-in exports only two encoding technique (reed_sol_van,cauchy) using either a Vandermonde matrix or a Cauchy matrix for coding.
By default a Vandermonde matrix is used.


Run the Test suite
==================
cd ceph/src
make unittest_erasure_code_isa
./unittest_erasure_code_isa --gtest_filter=*.* --log-to-stderr=true --debug-ods=20

Run the CEPH erasure code benchmark
===================================
cd ceph/src
make ceph_erasure_code_benchmark

# consult ./ceph_erasure_code_benchmark -h for help

# encode performance
./ceph_erasure_code_benchmark -p isa -P k=8 -P m=3 -S 1048576 -i 1000

# decode performance one lost
./ceph_erasure_code_benchmark -e 1 -w decode -p isa -P k=8 -P m=3 -S 1048576 -i 1000

# decode performance two lost
./ceph_erasure_code_benchmark -e 2 -w decode -p isa -P k=8 -P m=3 -S 1048576 -i 1000

# decode performance three lost
./ceph_erasure_code_benchmark -e 3 -w decode -p isa -P k=8 -P m=3 -S 1048576 -i 1000


Developer Notes
===============
The plugin-uses 64 byte aligned buffers. The encoding tables are computed only
once when the EC object is created. Decoding Tables have to be computed for 
each decoding since the available data/coding sources may change between calls.
A possible optimization is to keep the tables and only recompute them when the 
decoding configuration has changed. If decoding has to be thread-safe decoding
tables might use thread-local memory.

There is some duplicated code used from the Jerasure plug-in in this plug-in
library. The overlapping code should be extracted into a common base. Since the
EC interface is currently refactored after Firefly this has not yet been done.
